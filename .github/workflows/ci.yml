name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17.5
        env:
          POSTGRES_DB: gopay_test
          POSTGRES_USER: gopay
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U gopay -d gopay_test"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: go test -v -race ./...

    - name: Run integration tests (without external credentials)
      env:
        DATABASE_URL: postgresql://gopay:testpassword@localhost:5432/gopay_test
      run: |
        echo "Running integration tests without external credentials..."
        go test -v ./provider/iyzico/ -run TestIntegration || echo "Integration tests skipped - no credentials"
        go test -v ./provider/nkolay/ -run TestIntegration || echo "Integration tests skipped - no credentials"
        go test -v ./provider/ozanpay/ -run TestIntegration || echo "Integration tests skipped - no credentials"
        go test -v ./provider/papara/ -run TestIntegration || echo "Integration tests skipped - no credentials"
        go test -v ./provider/paycell/ -run TestIntegration || echo "Integration tests skipped - no credentials"
        go test -v ./provider/paytr/ -run TestIntegration || echo "Integration tests skipped - no credentials"
        go test -v ./provider/payu/ -run TestIntegration || echo "Integration tests skipped - no credentials"
        go test -v ./provider/stripe/ -run TestIntegration || echo "Integration tests skipped - no credentials"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m --out-format=colored-line-number --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build application
      run: |
        mkdir -p bin
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags="-s -w" -o bin/gopay ./cmd/main.go

    - name: Build for multiple platforms
      run: |
        # Build for Linux AMD64
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -ldflags="-s -w" -o bin/gopay-linux-amd64 ./cmd/main.go
        
        # Build for Linux ARM64
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a -installsuffix cgo -ldflags="-s -w" -o bin/gopay-linux-arm64 ./cmd/main.go
        
        # Build for macOS AMD64
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -a -installsuffix cgo -ldflags="-s -w" -o bin/gopay-darwin-amd64 ./cmd/main.go
        
        # Build for macOS ARM64
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -a -installsuffix cgo -ldflags="-s -w" -o bin/gopay-darwin-arm64 ./cmd/main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gopay-binaries
        path: bin/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 