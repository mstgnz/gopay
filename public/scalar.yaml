openapi: 3.0.0
info:
  title: GoPay API Documentation
  version: 1.5.0
  description: |
    **GoPay** is a unified payment integration service developed in Go. It abstracts different payment providers behind a single, standardized API, allowing developers to switch payment systems seamlessly without changing their codebase.

    ## Key Features
    - 🔄 **Unified API Interface**: Standardize diverse payment gateway APIs (İyzico, OzanPay, Stripe, etc.) into a consistent format
    - 🔌 **Plug-and-Play Architecture**: Easily switch between payment providers without code changes
    - 🏢 **Provider Agnostic**: Add new payment gateways without disrupting existing implementations
    - 🏢 **Multi-Tenant Support**: Multiple projects can use different provider configurations simultaneously
    - 🔐 **3D Secure Support**: Complete 3D Secure payment flow with POST redirect callback handling
    - 💰 **Full Payment Lifecycle**: Process, track, cancel, and refund payments
    - 🎯 **Webhook Integration**: Receive real-time payment notifications
    - 📝 **POST Redirect Callbacks**: Auto-submitted HTML forms preserve session state across 3D Secure flows
    - 🛡️ **Secure by Design**: Built-in authentication and security features
    - 🔐 **JWT Authentication**: Secure user authentication with token-based access
    - 💾 **PostgreSQL Database**: Persistent configuration and comprehensive payment logging
    - 📊 **Advanced Logging**: Complete request/response logging with PostgreSQL storage

    ## Supported Payment Providers
    - ✅ **İyzico** (Turkey) - Full integration with 3D Secure support
    - ✅ **OzanPay** (Turkey) - Production ready
    - ✅ **Stripe** (Global) - Production ready
    - ✅ **Paycell** (Turkey) - Production ready
    - ✅ **Papara** (Turkey) - Production ready
    - ✅ **Nkolay** (Turkey) - Production ready
    - ✅ **PayTR** (Turkey) - Production ready
    - ✅ **PayU** (Global) - Production ready

    ## Authentication System
    GoPay uses JWT (JSON Web Token) based authentication with auto-rotating secret keys for maximum security.

    ### Getting Started
    1. **First Setup**: Register first admin user with `POST /v1/auth/register`
    2. **Subsequent Users**: Use `POST /v1/auth/create-tenant` (admin only)
    3. **Login**: Get JWT token with `POST /v1/auth/login`
    4. **API Access**: Include token in Authorization header: `Bearer <token>`

    ### Registration Rules
    - ✅ **First User**: Automatic admin privileges, no restrictions
    - ❌ **Additional Users**: Only admin can create via create-tenant endpoint

    ### 🔐 Enhanced Security Model
    **Auto-Rotating JWT Secret Keys:**
    - JWT secret key regenerates on every service restart
    - All existing tokens become invalid after restart
    - Users must re-authenticate after service restart
    - No persistent secret storage (UUID-generated keys)
    
    **Token Management:**
    - **Expiry**: 24 hours default
    - **Refresh**: Use `/v1/auth/refresh` to extend validity
    - **Validation**: Use `/v1/auth/validate` to check token status
    - **Security**: Each API request validates token against current secret
    
    **Benefits:**
    - ✅ Maximum security through key rotation
    - ✅ No risk of leaked persistent secrets
    - ✅ Automatic token invalidation on restart
    - ✅ Forces regular re-authentication

    ## Database & Logging
    GoPay uses **PostgreSQL 17.5** for:
    - **User Management**: Secure tenant authentication
    - **Payment Logging**: Complete request/response tracking
    - **Configuration Storage**: Provider settings
    - **Analytics**: Real-time payment statistics

    ### Payment Logging Features
    - 📝 **Request/Response Logging**: All payment requests logged to provider-specific tables
    - ⏱️ **Performance Tracking**: Processing time measurement
    - 🔍 **Error Analysis**: Detailed error logging and categorization
    - 📊 **Multi-tenant Isolation**: Secure data separation

    ## Multi-Tenant Configuration
    GoPay supports multi-tenant architecture where different projects can use different payment provider configurations.

    ### Setup Flow
    1. **Authenticate**: Get JWT token via login
    2. **Configure**: `POST /v1/config/tenant` - Configure payment provider (tenant automatically detected from JWT token)
    3. **Process**: Use payment endpoints with JWT token - Automatically uses tenant-specific configuration

    ### JWT Token Authentication
    The system automatically extracts tenant information from JWT tokens:
    ```
    Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    ```

    ## Payment Flows

    ### 🔄 Standard Operations (Payment, Refund, Cancel)
    ```
    ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
    │                 │    │                 │    │                 │
    │   Your Apps     │◄──►│     GoPay       │◄──►│   Payment       │
    │  (Multi-Tenant) │    │   (Gateway)     │    │   Providers     │
    │                 │    │                 │    │                 │
    └─────────────────┘    └─────────────────┘    └─────────────────┘
    ```

    **Direct API flow for payments, refunds, and cancellations.**

    ### 🔐 3D Secure Payment Flow (Detailed)

    **Phase 1: Payment Initialization**
    ```
    1. [App] ──POST /payments/provider──► [GoPay]
       │ Request: { amount, cardInfo, callbackUrl: "app.com/callback" }
       │
       └─► [GoPay] ──► [Provider]
           │ Modified: { callbackUrl: "gopay.com/v1/callback/provider?originalCallbackUrl=app.com/callback" }
           │
           └─► Response: { redirectUrl: "provider-3d-secure-link" }
    ```

    **Phase 2: User Redirect**
    ```
    2. [GoPay] ──Response──► [App]
       │ Returns: { redirectUrl: "provider-3d-secure-link" }
       │
       └─► [App] redirects user to payment page
           │
           └─► User goes to [Provider 3D Secure Page]
    ```

    **Phase 3: 3D Secure Process**
    ```
    3. [User] completes 3D authentication on provider page
       ├─► Enter SMS code
       ├─► Bank authentication  
       └─► Payment confirmation
    ```

    **Phase 4: Callback Handling**
    ```
    4. [Provider] ──Callback──► [GoPay]
       │ URL: gopay.com/v1/callback/provider?originalCallbackUrl=app.com/callback
       │ Data: { paymentId, status, transactionId }
       │
       └─► [GoPay] processes result
           │
           └─► [GoPay] ──POST Redirect──► [App]
               │ Method: POST (via auto-submitted HTML form)
               │ URL: app.com/callback
               │ Data: { success: "true", paymentId: "123", status: "successful" }
               │
               └─► [App] receives POST data and shows result page
    ```

    **Complete 3D Secure Flow:**
    ```
    [Your App] → [GoPay] → [Provider] → [3D Page] → [Provider] → [GoPay] → [Your App]
        │           │          │           │          │           │          │
        │           │          │           │          │           │          │
        ▼           ▼          ▼           ▼          ▼           ▼          ▼
    1. Payment   2. Forward  3. Return   4. User    5. Callback 6. Process  7. Final
       request      with       3D link     auth       to GoPay    & redirect   result
                   callback
    ```

    ### 🔧 Session Management
    **Your application's session (PHP, Node.js, etc.) is preserved throughout the flow:**
    - ✅ **Session Cookies**: Domain-specific cookies remain intact
    - ✅ **HTTP Redirects**: Standard redirects don't affect session state
    - ✅ **Cross-Domain**: Browser maintains session across domains
    - ⚠️ **Timeout Considerations**: Ensure session timeout > payment duration

    ### 🔗 Callback URL Transformation & POST Redirect
    **GoPay automatically transforms your callback URLs and uses POST redirect:**
    ```
    Your Original:  "https://app.com/payment-callback"
    GoPay Sends:    "https://gopay.com/v1/callback/iyzico?originalCallbackUrl=https://app.com/payment-callback"
    Provider Returns: "https://gopay.com/v1/callback/iyzico?originalCallbackUrl=...&paymentId=123&status=success"
    GoPay POST Redirects to: "https://app.com/payment-callback"
    ```
    
    **⚠️ Important: Your callback URL must accept POST requests**
    
    **POST Data Structure:**
    ```json
    {
      "success": "true",
      "paymentId": "payment123",
      "status": "successful",
      "message": "Payment completed",
      "errorCode": "",
      "transactionId": "txn456",
      "amount": "100.50",
      "currency": "TRY"
    }
    ```

    ## Contact
    - **Developer**: Mesut GENEZ
    - **GitHub**: [https://github.com/mstgnz/gopay](https://github.com/mstgnz/gopay)
    - **License**: Boost Software License 1.0

servers:
  - url: ${APP_URL}
    description: GoPay Server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token required for authentication
  
  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "admin"
          description: User username
        password:
          type: string
          minLength: 6
          example: "password123"
          description: User password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: JWT authentication token
        expires_at:
          type: string
          format: date-time
          example: "2024-01-16T10:30:00Z"
          description: Token expiration time
        username:
          type: string
          example: "admin"
          description: Username
        tenant_id:
          type: string
          example: "1"
          description: Tenant ID

    RegisterRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "admin"
          description: Desired username
        password:
          type: string
          minLength: 6
          example: "password123"
          description: Password for the account

    ChangePasswordRequest:
      type: object
      required: [new_password]
      properties:
        current_password:
          type: string
          minLength: 6
          example: "oldpassword123"
          description: Current password (required when changing own password)
        new_password:
          type: string
          minLength: 6
          example: "newpassword123"
          description: New password
        target_tenant_id:
          type: integer
          example: 2
          description: Target tenant ID (admin only - for changing other users' passwords)

    CreateTenantRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "newuser"
          description: Username for new tenant
        password:
          type: string
          minLength: 6
          example: "password123"
          description: Password for new tenant

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Tenant ID
        username:
          type: string
          example: "admin"
          description: Username
        last_login:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
          description: Last login time
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
          description: Account creation time

    # Common Response Schemas
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
          example: true
        message:
          type: string
          description: Operation result message
          example: "Payment processed successfully"
        data:
          type: object
          description: Response data
          
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Always false for errors
          example: false
        message:
          type: string
          description: Error message
          example: "Payment failed"
        error:
          type: string
          description: Detailed error information
          example: "Invalid card number"

    # Payment Related Schemas
    PaymentStatus:
      type: string
      enum: [pending, processing, successful, failed, cancelled, refunded]
      description: Current payment status

    Address:
      type: object
      properties:
        city:
          type: string
          example: "Istanbul"
        country:
          type: string
          example: "Turkey"
        address:
          type: string
          example: "Atatürk Mahallesi 123 Sokak No:45"
        zipCode:
          type: string
          example: "34000"
        description:
          type: string
          example: "Home address"

    Customer:
      type: object
      required: [name, surname, email]
      properties:
        id:
          type: string
          example: "customer123"
          description: Unique customer identifier
        name:
          type: string
          example: "John"
          description: Customer first name
        surname:
          type: string
          example: "Doe"
          description: Customer last name
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: Customer email address
        phoneNumber:
          type: string
          example: "+905551234567"
          description: Customer phone number
        ipAddress:
          type: string
          format: ipv4
          example: "192.168.1.1"
          description: Customer IP address
        address:
          $ref: '#/components/schemas/Address'

    CardInfo:
      type: object
      required: [cardHolderName, cardNumber, expireMonth, expireYear, cvv]
      properties:
        cardHolderName:
          type: string
          example: "John Doe"
          description: Name on the card
        cardNumber:
          type: string
          example: "5528790000000008"
          description: Card number (for İyzico test use 5528790000000008)
        expireMonth:
          type: string
          pattern: '^(0[1-9]|1[0-2])$'
          example: "12"
          description: Card expiration month (MM)
        expireYear:
          type: string
          pattern: '^20[2-9][0-9]$'
          example: "2030"
          description: Card expiration year (YYYY)
        cvv:
          type: string
          pattern: '^[0-9]{3,4}$'
          example: "123"
          description: Card verification value

    Item:
      type: object
      properties:
        id:
          type: string
          example: "item1"
          description: Item identifier
        name:
          type: string
          example: "Premium Product"
          description: Item name
        description:
          type: string
          example: "High quality product"
          description: Item description
        category:
          type: string
          example: "Electronics"
          description: Item category
        price:
          type: number
          format: float
          example: 100.50
          description: Item price
        quantity:
          type: integer
          minimum: 1
          example: 1
          description: Item quantity

    PaymentRequest:
      type: object
      required: [amount, currency, customer, cardInfo]
      properties:
        id:
          type: string
          example: "payment123"
          description: Payment identifier
        referenceId:
          type: string
          example: "order456"
          description: External reference ID
        currency:
          type: string
          enum: [TRY, USD, EUR]
          example: "TRY"
          description: Payment currency
        amount:
          type: number
          format: float
          minimum: 0.01
          example: 100.50
          description: Payment amount
        customer:
          $ref: '#/components/schemas/Customer'
        cardInfo:
          $ref: '#/components/schemas/CardInfo'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          description: Payment items
        description:
          type: string
          example: "Order payment"
          description: Payment description
        callbackUrl:
          type: string
          format: uri
          example: "https://yoursite.com/payment-callback"
          description: 3D Secure callback URL (required for 3D payments). Must accept POST requests with payment result data.
        use3D:
          type: boolean
          default: false
          example: true
          description: Enable 3D Secure authentication
        installmentCount:
          type: integer
          minimum: 1
          maximum: 12
          default: 1
          example: 1
          description: Number of installments
        paymentChannel:
          type: string
          example: "WEB"
          description: Payment channel
        paymentGroup:
          type: string
          example: "PRODUCT"
          description: Payment group
        conversationId:
          type: string
          example: "conv123"
          description: Conversation ID for tracking
        locale:
          type: string
          enum: [tr, en]
          default: "tr"
          example: "tr"
          description: Payment language
        clientIp:
          type: string
          format: ipv4
          example: "192.168.1.1"
          description: Client IP address
        clientUserAgent:
          type: string
          example: "Mozilla/5.0..."
          description: Client user agent

    PaymentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Payment operation success
        status:
          $ref: '#/components/schemas/PaymentStatus'
        message:
          type: string
          example: "Payment successful"
          description: Operation message
        errorCode:
          type: string
          example: "5007"
          description: Provider specific error code
        transactionId:
          type: string
          example: "txn123"
          description: Transaction identifier
        paymentId:
          type: string
          example: "payment123"
          description: Payment identifier
        amount:
          type: number
          format: float
          example: 100.50
          description: Payment amount
        currency:
          type: string
          example: "TRY"
          description: Payment currency
        redirectUrl:
          type: string
          format: uri
          example: "https://3dsecure.bank.com/auth"
          description: 3D Secure redirect URL
        html:
          type: string
          example: "<form>3D Secure form</form>"
          description: 3D Secure HTML form
        systemTime:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
          description: System timestamp
        fraudStatus:
          type: integer
          example: 1
          description: Fraud check status
        providerResponse:
          type: object
          description: Raw provider response

    RefundRequest:
      type: object
      required: [paymentId]
      properties:
        paymentId:
          type: string
          example: "payment123"
          description: Payment ID to refund
        refundAmount:
          type: number
          format: float
          example: 50.00
          description: Refund amount (leave empty for full refund)
        reason:
          type: string
          example: "Customer request"
          description: Refund reason
        description:
          type: string
          example: "Customer requested partial refund"
          description: Detailed refund description
        currency:
          type: string
          example: "TRY"
          description: Refund currency
        conversationId:
          type: string
          example: "conv123"
          description: Conversation ID

    RefundResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Refund operation success
        refundId:
          type: string
          example: "refund123"
          description: Refund identifier
        paymentId:
          type: string
          example: "payment123"
          description: Original payment ID
        status:
          type: string
          example: "success"
          description: Refund status
        refundAmount:
          type: number
          format: float
          example: 50.00
          description: Refunded amount
        message:
          type: string
          example: "Refund successful"
          description: Operation message
        errorCode:
          type: string
          example: ""
          description: Error code if failed
        systemTime:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
          description: System timestamp
        rawResponse:
          type: object
          description: Raw provider response

    CancelRequest:
      type: object
      properties:
        reason:
          type: string
          example: "Customer request"
          description: Cancellation reason

    # Installment Related Schemas
    InstallmentInquireRequest:
      type: object
      required: [amount]
      properties:
        cardNumber:
          type: string
          example: "5528790000000008"
          description: Card number for installment inquiry (optional)
        expireMonth:
          type: string
          pattern: '^(0[1-9]|1[0-2])$'
          example: "12"
          description: Card expiration month (optional)
        expireYear:
          type: string
          pattern: '^20[2-9][0-9]$'
          example: "2030"
          description: Card expiration year (optional)
        cvv:
          type: string
          pattern: '^[0-9]{3,4}$'
          example: "123"
          description: Card verification value (optional)
        amount:
          type: number
          format: float
          minimum: 0.01
          example: 100.50
          description: Payment amount for installment calculation

    InstallmentInfo:
      type: object
      properties:
        installment:
          type: integer
          example: 2
          description: Number of installments
        commission:
          type: number
          format: float
          example: 6.13
          description: Commission rate percentage

    InstallmentInquireResponse:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 100.50
          description: Requested amount
        message:
          type: string
          example: "Installment options retrieved successfully"
          description: Response message
        installments:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/InstallmentInfo'
          example:
            PARAF:
              - installment: 1
                commission: 3.3
              - installment: 2
                commission: 6.13
            AXESS:
              - installment: 1
                commission: 3.3
              - installment: 2
                commission: 6.13
          description: Installment options by card type/bank

    # Configuration Schemas
    SetEnvResponse:
      type: object
      properties:
        tenantId:
          type: integer
          example: 1
          description: Tenant identifier
        configuredProviders:
          type: array
          items:
            type: string
          example: ["iyzico", "ozanpay"]
          description: List of successfully configured providers
        message:
          type: string
          example: "Provider configurations set successfully"
          description: Success message

    TenantConfigResponse:
      type: object
      properties:
        tenantId:
          type: integer
          example: 1
          description: Tenant identifier
        provider:
          type: string
          example: "iyzico"
          description: Provider name
        config:
          type: object
          additionalProperties:
            type: string
          example:
            apiKey: "sand****key"
            secretKey: "sand****ret"
            environment: "sandbox"
          description: Masked configuration values

    StatsResponse:
      type: object
      properties:
        memory_configs:
          type: integer
          example: 15
          description: Number of configurations in memory
        base_url:
          type: string
          example: "http://localhost:9999"
          description: Base URL for callbacks
        postgresql:
          type: object
          properties:
            total_configs:
              type: integer
              example: 15
              description: Total configurations in database
            unique_tenants:
              type: integer
              example: 5
              description: Number of unique tenants
            unique_providers:
              type: integer
              example: 3
              description: Number of unique providers
            total_payments:
              type: integer
              example: 1250
              description: Total payments logged
            database_size_mb:
              type: number
              format: float
              example: 45.2
              description: Database size in megabytes
            connection_status:
              type: string
              example: "connected"
              description: Database connection status
          description: PostgreSQL database statistics

    # Logging Schemas
    PaymentLog:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
          description: Log timestamp
        tenant_id:
          type: string
          example: "tenant123"
          description: Tenant identifier
        provider:
          type: string
          example: "iyzico"
          description: Payment provider
        method:
          type: string
          example: "POST"
          description: HTTP method
        endpoint:
          type: string
          example: "/v1/payments/iyzico"
          description: API endpoint
        request_id:
          type: string
          example: "req-123"
          description: Request identifier
        user_agent:
          type: string
          example: "GoPay-Client/1.0"
          description: User agent
        client_ip:
          type: string
          format: ipv4
          example: "192.168.1.1"
          description: Client IP address
        request:
          type: object
          properties:
            headers:
              type: object
              additionalProperties:
                type: string
              example:
                Content-Type: "application/json"
                Authorization: "***REDACTED***"
              description: Request headers (sensitive data redacted)
            body:
              type: string
              example: '{"amount":100.50,"currency":"TRY","cardNumber":"***REDACTED***"}'
              description: Request body (sensitive data redacted)
            params:
              type: object
              additionalProperties:
                type: string
              description: URL parameters
        response:
          type: object
          properties:
            status_code:
              type: integer
              example: 200
              description: HTTP status code
            headers:
              type: object
              additionalProperties:
                type: string
              description: Response headers
            body:
              type: string
              example: '{"success":true,"paymentId":"pay123"}'
              description: Response body
            processing_time_ms:
              type: integer
              example: 1250
              description: Processing time in milliseconds
        payment_info:
          type: object
          properties:
            payment_id:
              type: string
              example: "payment123"
              description: Payment identifier
            amount:
              type: number
              format: float
              example: 100.50
              description: Payment amount
            currency:
              type: string
              example: "TRY"
              description: Payment currency
            customer_email:
              type: string
              format: email
              example: "john@example.com"
              description: Customer email
            status:
              type: string
              example: "successful"
              description: Payment status
            use_3d:
              type: boolean
              example: true
              description: 3D Secure used
        error:
          type: object
          properties:
            code:
              type: string
              example: "5007"
              description: Error code
            message:
              type: string
              example: "Payment failed"
              description: Error message

    LoggingStats:
      type: object
      properties:
        aggregations:
          type: object
          properties:
            total_requests:
              type: object
              properties:
                value:
                  type: integer
                  example: 150
                  description: Total number of requests
            success_count:
              type: object
              properties:
                doc_count:
                  type: integer
                  example: 142
                  description: Number of successful requests
            error_count:
              type: object
              properties:
                doc_count:
                  type: integer
                  example: 8
                  description: Number of failed requests
            avg_processing_time:
              type: object
              properties:
                value:
                  type: number
                  format: float
                  example: 245.5
                  description: Average processing time in milliseconds
            status_codes:
              type: object
              properties:
                buckets:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: integer
                        example: 200
                        description: HTTP status code
                      doc_count:
                        type: integer
                        example: 142
                        description: Number of requests with this status
                  example:
                    - key: 200
                      doc_count: 142
                    - key: 400
                      doc_count: 5
                    - key: 500
                      doc_count: 3
                  description: Distribution of HTTP status codes

    CommissionRequest:
      type: object
      required: [binValue, amount, installmentCount]
      properties:
        binValue:
          type: string
          example: "552879"
          description: BIN number
        amount:
          type: number
          format: float
          example: 100.50
          description: Payment amount
        installmentCount:
          type: integer
          minimum: 0
          maximum: 12
          example: 1
          description: Number of installments
        currency:
          type: string
          enum: [TRY, USD, EUR]
          example: TRY
          description: Currency code

    CommissionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Commission retrieval success status
        amount:
          type: number
          format: float
          example: 100.50
          description: Commission amount
        rate:
          type: number
          format: float
          example: 6.13
          description: Commission rate percentage

security:
  - BearerAuth: []

paths:
  # Configuration Operations
  /v1/config/tenant:
    post:
      summary: Configure payment provider for authenticated tenant
      description: |
        Sets up payment provider configurations for the authenticated tenant.
        Tenant information is automatically extracted from the JWT token.
        
        **JWT Token Flow:**
        1. Authenticate and get JWT token via `/v1/auth/login`
        2. Call this endpoint with Bearer token and provider credentials
        3. Use payment endpoints with the same Bearer token
        4. GoPay automatically uses tenant-specific configuration from JWT context
        
        **Supported Providers:**
        - iyzico
        - ozanpay
        - stripe
        - paycell
        - papara
        - nkolay
        - paytr
        - payu
      tags: [Configuration]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [provider, environment, configs]
              properties:
                provider:
                  type: string
                  enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
                  description: Payment provider name (select from list)
                  example: paycell
                environment:
                  type: string
                  enum: [sandbox, production]
                  description: Environment (sandbox or production)
                  example: sandbox
                configs:
                  type: array
                  description: Provider configuration key/value pairs
                  items:
                    type: object
                    required: [key, value]
                    properties:
                      key:
                        type: string
                        description: Configuration key
                        example: username
                      value:
                        type: string
                        description: Configuration value
                        example: "paycell-user"
            examples:
              paycell_config:
                summary: Paycell Configuration
                value:
                  provider: paycell
                  environment: sandbox
                  configs:
                    - key: username
                      value: "paycell-user"
                    - key: password
                      value: "paycell-pass"
                    - key: merchantId
                      value: "merchant456"
                    - key: secureCode
                      value: "secure-code"
      responses:
        '200':
          description: Configuration saved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SetEnvResponse'
        '400':
          description: Invalid configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
    get:
      summary: Get tenant configuration for provider
      description: |
        Retrieves the configuration for the authenticated tenant and specified provider.
        Tenant information is automatically extracted from the JWT token.
        Sensitive information (API keys, passwords) are masked in the response.
      tags: [Configuration]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TenantConfigResponse'
        '400':
          description: Missing required parameters
        '404':
          description: Configuration not found
        '500':
          description: Internal server error
    
    delete:
      summary: Delete tenant configuration for provider
      description: |
        Deletes the configuration for the authenticated tenant and specified provider.
        Tenant information is automatically extracted from the JWT token.
        This removes both the in-memory and persistent storage configuration.
      tags: [Configuration]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
      responses:
        '200':
          description: Configuration deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tenantId:
                            type: integer
                            example: 1
                          provider:
                            type: string
                            example: "iyzico"
                          message:
                            type: string
                            example: "Configuration deleted successfully"
        '400':
          description: Missing required parameters
        '404':
          description: Configuration not found
        '500':
          description: Internal server error

  /v1/stats:
    get:
      summary: Get system statistics
      description: |
        Returns system statistics including:
        - Number of configurations in memory
        - PostgreSQL database statistics
        - Payment logging metrics
        - Storage information
      tags: [Configuration]
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/StatsResponse'
        '500':
          description: Internal server error

  # Payment Operations
  /v1/payments/{provider}:
    post:
      summary: Process payment with specific provider
      description: |
        Processes a payment using a specific payment provider.
        Provider configuration is automatically loaded from JWT token context.
        
        **Available Providers:**
        - `iyzico` - İyzico (Turkey)
        - `ozanpay` - OzanPay (Turkey) 
        - `stripe` - Stripe (Global)
        
        **JWT Token Authentication:**
        - Bearer token automatically provides tenant context
        - Provider configuration is used automatically
      tags: [Payments]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [sandbox, production]
            default: sandbox
          description: Payment environment (defaults to sandbox if not provided)
          example: sandbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: Invalid request or provider not supported
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  /v1/payments/{provider}/{paymentID}:
    get:
      summary: Get payment status with specific provider
      description: |
        Retrieves the current status of a payment using a specific provider.
        Provider configuration is automatically loaded from JWT token context.
      tags: [Payments]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
        - name: paymentID
          in: path
          required: true
          schema:
            type: string
          description: Payment ID to check
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [sandbox, production]
            default: sandbox
          description: Payment environment (defaults to sandbox if not provided)
          example: sandbox
      responses:
        '200':
          description: Payment status retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error
    
    delete:
      summary: Cancel payment with specific provider
      description: |
        Cancels a payment using a specific provider.
        Provider configuration is automatically loaded from JWT token context.
      tags: [Payments]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
        - name: paymentID
          in: path
          required: true
          schema:
            type: string
          description: Payment ID to cancel
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [sandbox, production]
            default: sandbox
          description: Payment environment (defaults to sandbox if not provided)
          example: sandbox
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelRequest'
      responses:
        '200':
          description: Payment cancelled successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: Invalid parameters or payment cannot be cancelled
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  # Refund Operations
  /v1/payments/{provider}/refund:
    post:
      summary: Refund payment with specific provider
      description: |
        Processes a refund using a specific provider.
        Provider configuration is automatically loaded from JWT token context.
      tags: [Refunds]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [sandbox, production]
            default: sandbox
          description: Payment environment (defaults to sandbox if not provided)
          example: sandbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: Refund processed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RefundResponse'
        '400':
          description: Invalid refund request
        '401':
          description: Unauthorized - Invalid JWT token
        '404':
          description: Payment not found
        '500':
          description: Internal server error

  # Installment Operations
  /v1/payments/{provider}/installments:
    post:
      summary: Get installment options with specific provider
      description: |
        Retrieves available installment options for a payment amount using a specific provider.
        Provider configuration is automatically loaded from JWT token context.
        
        **Available Providers:**
        - `nkolay` - Nkolay (Turkey) - Full installment support
        - `iyzico` - İyzico (Turkey) - Installment support
        - `paycell` - Paycell (Turkey) - Basic installment support
        
        **Use Cases:**
        - Display installment options to customer before payment
        - Calculate commission rates for different installment counts
        - Show available card types and their installment options
        
        **Provider-Specific Behavior:**
        - **Nkolay**: Returns detailed installment options by card type (PARAF, AXESS, etc.)
        - **İyzico**: Returns general installment options
        - **Other Providers**: May return empty response if not supported
      tags: [Installments]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: nkolay
        - name: environment
          in: query
          required: true
          schema:
            type: string
            enum: [sandbox, production]
            default: sandbox
          description: Payment environment (defaults to sandbox if not provided)
          example: sandbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallmentInquireRequest'
            examples:
              nkolay_request:
                summary: Nkolay Installment Request
                value:
                  amount: 100.50
              iyzico_request:
                summary: İyzico Installment Request (with card info)
                value:
                  cardNumber: "5528790000000008"
                  expireMonth: "12"
                  expireYear: "2030"
                  cvv: "123"
                  amount: 150.75
      responses:
        '200':
          description: Installment options retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InstallmentInquireResponse'
              examples:
                nkolay_success:
                  summary: Nkolay Response with Multiple Card Types
                  value:
                    success: true
                    message: "Installment options retrieved successfully"
                    data:
                      amount: 100.50
                      message: "Installment options retrieved successfully"
                      installments:
                        PARAF:
                          - installment: 1
                            commission: 3.3
                          - installment: 2
                            commission: 6.13
                          - installment: 3
                            commission: 8.06
                        AXESS:
                          - installment: 1
                            commission: 3.3
                          - installment: 2
                            commission: 6.13
                          - installment: 3
                            commission: 8.06
                        BONUS:
                          - installment: 1
                            commission: 3.3
                          - installment: 2
                            commission: 6.13
                iyzico_success:
                  summary: İyzico Response
                  value:
                    success: true
                    message: "Installment options retrieved successfully"
                    data:
                      amount: 150.75
                      message: "Installment options retrieved successfully"
                      installments:
                        GENERAL:
                          - installment: 1
                            commission: 2.5
                          - installment: 2
                            commission: 5.0
                          - installment: 3
                            commission: 7.5
                unsupported_provider:
                  summary: Unsupported Provider
                  value:
                    success: true
                    message: "Installment inquiry not supported for this provider"
                    data:
                      amount: 100.50
                      message: "Installment inquiry not supported for this provider"
                      installments: {}
        '400':
          description: Invalid request or provider not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_amount:
                  summary: Invalid Amount
                  value:
                    success: false
                    message: "Invalid installment request"
                    error: "Amount must be greater than 0"
                provider_error:
                  summary: Provider Error
                  value:
                    success: false
                    message: "Provider configuration error"
                    error: "Nkolay configuration not found for tenant"
        '401':
          description: Unauthorized - Invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 3D Secure Callbacks
  /v1/callback/{provider}:
    get:
      summary: Handle 3D Secure callback (GET) with specific provider
      description: |
        Handles 3D Secure authentication callback from the bank using GET method with specific provider.
        This endpoint is called by the bank after user completes 3D authentication.
        
        **🔄 Callback Flow:**
        ```
        [Provider] → [GoPay Callback] → [POST Redirect] → [Your App]
        ```
        
        **URL Transformation & POST Redirect:**
        - **Provider sends to GoPay:** `gopay.com/v1/callback/iyzico?originalCallbackUrl=app.com/callback&paymentId=123&status=success`
        - **GoPay processes and POST redirects to:** `app.com/callback` (using auto-submitted HTML form)
        
        **⚠️ Critical: Your callback URL must handle POST requests**
        
        **Session Preservation:**
        - ✅ Your app's session (PHP, Node.js, etc.) is preserved
        - ✅ Browser maintains session cookies across redirects
        - ✅ No authentication required (called by payment providers)
        
        **Multi-Tenant Support:**
        - Include `tenantId` query parameter for proper tenant routing
        - GoPay automatically routes to correct tenant configuration
        - Provider name is validated against active providers
      tags: [3D Secure]
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name (must exist in providers table)
          example: iyzico
        - name: tenantId
          in: query
          required: true
          schema:
            type: string
          description: Tenant identifier for multi-tenant callback routing (optional)
          example: abc_project
        - name: paymentId
          in: query
          required: true
          schema:
            type: string
          description: Payment ID from initial 3D request
        - name: conversationId
          in: query
          schema:
            type: string
          description: Conversation ID for tracking
        - name: successUrl
          in: query
          schema:
            type: string
            format: uri
          description: URL to redirect on success
        - name: errorUrl
          in: query
          schema:
            type: string
            format: uri
          description: URL to redirect on error
      responses:
        '200':
          description: Auto-submitted HTML form for POST redirect
          content:
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                  <html>
                  <head><title>Processing...</title></head>
                  <body>
                    <form id="redirectForm" method="POST" action="https://yourapp.com/callback">
                      <input type="hidden" name="success" value="true">
                      <input type="hidden" name="paymentId" value="payment123">
                      <input type="hidden" name="status" value="successful">
                    </form>
                    <script>document.getElementById('redirectForm').submit();</script>
                  </body>
                  </html>
                description: HTML page that automatically submits a POST form to your callback URL
        '400':
          description: Invalid callback data
        '500':
          description: Internal server error
    
    post:
      summary: Handle 3D Secure callback (POST) with specific provider
      description: |
        Handles 3D Secure authentication callback from the bank using POST method with specific provider.
        This endpoint is called by the bank after user completes 3D authentication.
        
        **🔄 Callback Flow:**
        ```
        [Provider] → [GoPay Callback] → [POST Redirect] → [Your App]
        ```
        
        **URL Transformation & POST Redirect:**
        - **Provider sends to GoPay:** `gopay.com/v1/callback/iyzico?originalCallbackUrl=app.com/callback&paymentId=123&status=success`
        - **GoPay processes and POST redirects to:** `app.com/callback` (using auto-submitted HTML form)
        
        **⚠️ Critical: Your callback URL must handle POST requests**
        
        **Session Preservation:**
        - ✅ Your app's session (PHP, Node.js, etc.) is preserved
        - ✅ Browser maintains session cookies across redirects
        - ✅ No authentication required (called by payment providers)
        
        **Multi-Tenant Support:**
        - Include `tenantId` query parameter for proper tenant routing
        - GoPay automatically routes to correct tenant configuration
        - Provider name is validated against active providers
      tags: [3D Secure]
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name (must exist in providers table)
          example: iyzico
        - name: tenantId
          in: query
          required: true
          schema:
            type: integer
          description: Tenant identifier for multi-tenant callback routing (optional)
          example: 1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                paymentId:
                  type: string
                  description: Payment ID
                conversationId:
                  type: string
                  description: Conversation ID
                status:
                  type: string
                  description: 3D authentication status
                mdStatus:
                  type: string
                  description: 3D authentication result
      responses:
        '200':
          description: Auto-submitted HTML form for POST redirect
          content:
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                  <html>
                  <head><title>Processing...</title></head>
                  <body>
                    <form id="redirectForm" method="POST" action="https://yourapp.com/callback">
                      <input type="hidden" name="success" value="true">
                      <input type="hidden" name="paymentId" value="payment123">
                      <input type="hidden" name="status" value="successful">
                    </form>
                    <script>document.getElementById('redirectForm').submit();</script>
                  </body>
                  </html>
                description: HTML page that automatically submits a POST form to your callback URL
        '400':
          description: Invalid callback data
        '500':
          description: Internal server error

 # Webhook Operations (No Authentication Required)
  /v1/webhooks/{provider}:
    post:
      summary: Handle webhook notifications
      description: |
        Receives webhook notifications from payment providers for:
        - Payment status updates (success, failure)
        - Refund notifications
        - Fraud alerts
        - Chargeback notifications
        
        **🔄 Webhook Flow:**
        ```
        [Provider] → [GoPay Webhook] → [Internal Processing]
        ```
        
        **Key Differences from Callbacks:**
        - **Callbacks**: User browser redirects (3D Secure)
        - **Webhooks**: Server-to-server notifications (background)
        - **Callbacks**: Require user interaction
        - **Webhooks**: Automatic processing
        
        **Multi-Tenant Support:**
        - Include `tenantId` query parameter for tenant-specific routing
        - GoPay automatically validates signatures and processes notifications
        - No authentication required (cryptographic signatures for security)
        
        **Provider-Specific Examples:**
        
        **İyzico Webhooks:**
        - Payment completion/failure
        - Refund confirmations
        - Fraud check results
        
        **Stripe Webhooks:**
        - Payment intent updates
        - Subscription events
        - Invoice payments
        
        **Security:**
        - ✅ Cryptographic signature validation
        - ✅ No authentication required
        - ✅ Provider-specific validation rules
      tags: [Webhooks]
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: Provider-specific webhook payload
            examples:
              iyzico_success:
                summary: İyzico Payment Success
                value:
                  paymentId: "payment_123"
                  status: "success"
                  transactionId: "txn_456"
                  amount: "100.50"
                  currency: "TRY"
                  paymentTransactionId: "pt_789"
                  conversationId: "conv_abc"
              stripe_payment_intent:
                summary: Stripe Payment Intent
                value:
                  id: "evt_1234567890"
                  type: "payment_intent.succeeded"
                  data:
                    object:
                      id: "pi_1234567890"
                      amount: 10050
                      currency: "usd"
                      status: "succeeded"
              paycell_notification:
                summary: Paycell Payment Notification
                value:
                  transactionId: "123456789"
                  referenceNumber: "ref_123"
                  amount: "100.50"
                  currency: "TRY"
                  status: "SUCCESS"
                  timestamp: "2024-01-15T10:30:00Z"
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            example: "accepted"
                          paymentId:
                            type: string
                            example: "payment_123"
                          processed:
                            type: boolean
                            example: true
                          timestamp:
                            type: string
                            format: date-time
                            example: "2024-01-15T10:30:00Z"
        '400':
          description: Invalid webhook data or signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_signature:
                  summary: Invalid Signature
                  value:
                    success: false
                    message: "Webhook signature validation failed"
                    error: "Invalid or missing signature header"
                invalid_payload:
                  summary: Invalid Payload
                  value:
                    success: false
                    message: "Invalid webhook payload"
                    error: "Required fields missing or malformed data"
        '401':
          description: Webhook authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Analytics Operations (JWT Authentication Required)
  /v1/analytics/dashboard:
    get:
      summary: Get dashboard statistics
      description: |
        Retrieves comprehensive dashboard statistics including:
        - Payment volume and success rates
        - Provider performance metrics
        - Recent transaction trends
        - Error rates and common issues
        
        **JWT Authentication Required** - Tenant information is extracted from JWT token.
        
        **Tenant Security Rules:**
        - **Admin Users (tenant_id=1)**: Can use any tenant_id parameter value to access all tenants' data
        - **Regular Users (tenant_id≠1)**: tenant_id parameter is ignored, automatically uses their own tenant_id from JWT token
        
        **Filters:**
        - Tenant ID (only effective for admin users)
        - Provider ID 
        - Environment
        - Month/Year for trends
      tags: [Analytics]
      security:
        - BearerAuth: []
      parameters:
        - name: tenant_id
          in: query
          required: false
          schema:
            type: string
          description: Tenant ID filter (only effective for admin users with tenant_id=1, regular users automatically use their own tenant_id)
          example: "all"
        - name: provider_id
          in: query
          required: false
          schema:
            type: string
            enum: [all, iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
            default: all
          description: Payment provider filter
          example: "all"
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [all, sandbox, production]
            default: all
          description: Environment filter
          example: "all"
        - name: month
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 12
          description: Month filter (1-12) for trends
          example: 1
        - name: year
          in: query
          required: false
          schema:
            type: integer
            minimum: 2020
            maximum: 2030
          description: Year filter for trends
          example: 2024
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Dashboard statistics retrieved"
                  data:
                    type: object
                    properties:
                      totalPayments:
                        type: integer
                        example: 1250
                      successfulPayments:
                        type: integer
                        example: 1187
                      failedPayments:
                        type: integer
                        example: 63
                      successRate:
                        type: number
                        format: float
                        example: 94.96
                      totalVolume:
                        type: number
                        format: float
                        example: 125430.50
                      averageAmount:
                        type: number
                        format: float
                        example: 100.34
                      topProviders:
                        type: array
                        items:
                          type: object
                          properties:
                            provider:
                              type: string
                              example: "iyzico"
                            count:
                              type: integer
                              example: 450
                            volume:
                              type: number
                              format: float
                              example: 45230.75
                      recentTrends:
                        type: array
                        items:
                          type: object
                          properties:
                            hour:
                              type: string
                              format: date-time
                              example: "2024-01-15T10:00:00Z"
                            payments:
                              type: integer
                              example: 52
                            volume:
                              type: number
                              format: float
                              example: 5234.20
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  /v1/analytics/providers:
    get:
      summary: Get provider statistics
      description: |
        Retrieves performance statistics for all payment providers including:
        - Success rates by provider
        - Average processing times
        - Error rates and common failures
        - Volume distribution
        
        **JWT Authentication Required** - Tenant information is extracted from JWT token.
        
        **Tenant Security Rules:**
        - **Admin Users (tenant_id=1)**: Can use any tenant_id parameter value to access all tenants' data
        - **Regular Users (tenant_id≠1)**: tenant_id parameter is ignored, automatically uses their own tenant_id from JWT token
      tags: [Analytics]
      security:
        - BearerAuth: []
      parameters:
        - name: tenant_id
          in: query
          required: false
          schema:
            type: string
          description: Tenant ID filter (only effective for admin users with tenant_id=1, regular users automatically use their own tenant_id)
          example: "all"
        - name: provider_id
          in: query
          required: false
          schema:
            type: string
            enum: [all, iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
            default: all
          description: Payment provider filter
          example: "all"
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [all, sandbox, production]
            default: all
          description: Environment filter
          example: "all"
        - name: month
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 12
          description: Month filter (1-12) for trends
          example: 1
        - name: year
          in: query
          required: false
          schema:
            type: integer
            minimum: 2020
            maximum: 2030
          description: Year filter for trends
          example: 2024
      responses:
        '200':
          description: Provider statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        provider:
                          type: string
                          example: "iyzico"
                        totalPayments:
                          type: integer
                          example: 450
                        successfulPayments:
                          type: integer
                          example: 428
                        successRate:
                          type: number
                          format: float
                          example: 95.11
                        totalVolume:
                          type: number
                          format: float
                          example: 45230.75
                        averageProcessingTime:
                          type: number
                          format: float
                          example: 1250.5
                        commonErrors:
                          type: array
                          items:
                            type: object
                            properties:
                              errorCode:
                                type: string
                                example: "INSUFFICIENT_FUNDS"
                              count:
                                type: integer
                                example: 15
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  /v1/analytics/activity:
    get:
      summary: Get recent payment activity
      description: |
        Retrieves recent payment activity for real-time monitoring:
        - Latest transactions
        - Status changes
        - Failed payments
        - Refunds and cancellations
        
        **JWT Authentication Required** - Tenant information is extracted from JWT token.
        
        **Tenant Security Rules:**
        - **Admin Users (tenant_id=1)**: Can use any tenant_id parameter value to access all tenants' data
        - **Regular Users (tenant_id≠1)**: tenant_id parameter is ignored, automatically uses their own tenant_id from JWT token
      tags: [Analytics]
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Maximum number of activities to return
          example: 10
        - name: tenant_id
          in: query
          required: false
          schema:
            type: string
          description: Tenant ID filter (only effective for admin users with tenant_id=1, regular users automatically use their own tenant_id)
          example: "all"
        - name: provider_id
          in: query
          required: false
          schema:
            type: string
            enum: [all, iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
            default: all
          description: Payment provider filter
          example: "all"
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [all, sandbox, production]
            default: all
          description: Environment filter
          example: "all"
      responses:
        '200':
          description: Recent activity retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                          example: "2024-01-15T10:30:00Z"
                        provider:
                          type: string
                          example: "iyzico"
                        paymentId:
                          type: string
                          example: "payment_123"
                        amount:
                          type: number
                          format: float
                          example: 100.50
                        currency:
                          type: string
                          example: "TRY"
                        status:
                          type: string
                          example: "successful"
                        customerEmail:
                          type: string
                          example: "user@example.com"
                        activityType:
                          type: string
                          enum: [payment, refund, cancellation, status_change]
                          example: "payment"
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  /v1/analytics/trends:
    get:
      summary: Get payment trends
      description: |
        Retrieves payment trends over time for analytics:
        - Daily payment volumes for selected month/year
        - Success rate trends
        - Provider performance over time
        - Monthly patterns
        
        **JWT Authentication Required** - Tenant information is extracted from JWT token.
        
        **Tenant Security Rules:**
        - **Admin Users (tenant_id=1)**: Can use any tenant_id parameter value to access all tenants' data
        - **Regular Users (tenant_id≠1)**: tenant_id parameter is ignored, automatically uses their own tenant_id from JWT token
      tags: [Analytics]
      security:
        - BearerAuth: []
      parameters:
        - name: tenant_id
          in: query
          required: false
          schema:
            type: string
          description: Tenant ID filter (only effective for admin users with tenant_id=1, regular users automatically use their own tenant_id)
          example: "all"
        - name: provider_id
          in: query
          required: false
          schema:
            type: string
            enum: [all, iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
            default: all
          description: Payment provider filter
          example: "all"
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [all, sandbox, production]
            default: all
          description: Environment filter
          example: "all"
        - name: month
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 12
          description: Month filter (1-12) for trends
          example: 1
        - name: year
          in: query
          required: false
          schema:
            type: integer
            minimum: 2020
            maximum: 2030
          description: Year filter for trends
          example: 2024
      responses:
        '200':
          description: Payment trends retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          labels:
                            type: array
                            items:
                              type: string
                            example: ["Jan 1", "Jan 2", "Jan 3"]
                            description: Day labels for the chart
                          datasets:
                            type: array
                            items:
                              type: object
                              properties:
                                label:
                                  type: string
                                  example: "Successful Payments"
                                data:
                                  type: array
                                  items:
                                    type: integer
                                  example: [10, 15, 8]
                                borderColor:
                                  type: string
                                  example: "#10B981"
                                backgroundColor:
                                  type: string
                                  example: "rgba(16, 185, 129, 0.1)"
                          volume:
                            type: array
                            items:
                              type: number
                              format: float
                            example: [1000.50, 1500.75, 800.25]
                            description: Daily volume data
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  /v1/analytics/tenants:
    get:
      summary: Get active tenants list
      description: |
        Retrieves list of all active tenants for admin users.
        
        **JWT Authentication Required** - Only admin users can access this endpoint.
        
        **Access Control:**
        - Admin users (tenant_id=1): Returns all tenants
        - Regular users: Access denied
      tags: [Analytics]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Active tenants retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: "admin"
                            created_at:
                              type: string
                              format: date-time
                              example: "2024-01-01T00:00:00Z"
        '401':
          description: Unauthorized - Invalid JWT token
        '403':
          description: Forbidden - Admin access required
        '500':
          description: Internal server error

  /v1/analytics/providers/list:
    get:
      summary: Get active providers list
      description: |
        Retrieves list of configured payment providers for the authenticated tenant.
        
        **JWT Authentication Required** - Tenant information is extracted from JWT token.
        
        **Access Control:**
        - Admin users: Returns all providers across all tenants
        - Regular users: Returns only their configured providers
      tags: [Analytics]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Active providers retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "iyzico"
                            name:
                              type: string
                              example: "İyzico"
                            tenant_count:
                              type: integer
                              example: 3
                              description: Number of tenants using this provider
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  /v1/analytics/search:
    get:
      summary: Search payment by ID
      description: |
        Searches for a specific payment by ID across the authenticated tenant's data.
        
        **JWT Authentication Required** - Tenant information is extracted from JWT token.
        
        **Security:**
        - **Admin Users (tenant_id=1)**: Can search any tenant's data by specifying tenant_id parameter
        - **Regular Users (tenant_id≠1)**: tenant_id parameter must match their own tenant_id, cannot access other tenants' data
        
        **Required Parameters:**
        - tenant_id: Must be specified
        - provider_id: Must be specified  
        - payment_id: Payment ID to search for
      tags: [Analytics]
      security:
        - BearerAuth: []
      parameters:
        - name: tenant_id
          in: query
          required: true
          schema:
            type: string
          description: Tenant ID (admin users can specify any value, regular users must use their own tenant_id)
          example: "1"
        - name: provider_id
          in: query
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: "iyzico"
        - name: payment_id
          in: query
          required: true
          schema:
            type: string
          description: Payment ID to search for
          example: "payment123"
      responses:
        '200':
          description: Payment found successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: "payment"
                            provider:
                              type: string
                              example: "iyzico"
                            amount:
                              type: string
                              example: "₺100.50"
                            status:
                              type: string
                              example: "successful"
                            time:
                              type: string
                              example: "2024-01-15 10:30:00"
                            id:
                              type: string
                              example: "payment123"
                            tenantId:
                              type: string
                              example: "1"
                            env:
                              type: string
                              example: "sandbox"
                            request:
                              type: string
                              example: '{"amount": 100.50}'
                            response:
                              type: string
                              example: '{"success": true}'
                            endpoint:
                              type: string
                              example: "/v1/payments/iyzico"
        '400':
          description: Invalid request - Missing required parameters
        '401':
          description: Unauthorized - Invalid JWT token
        '403':
          description: Forbidden - Access denied to specified tenant data
        '404':
          description: Payment not found
        '500':
          description: Internal server error

  # Health Check (No Authentication Required)
  /health:
    get:
      summary: Service health check
      description: |
        Returns the health status of the GoPay service including:
        - Service availability
        - PostgreSQL database connectivity
        - Payment provider connectivity
        - System version
        
        **No Authentication Required** - This is a public health check endpoint.
      tags: [System]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Service is healthy"
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "ok"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2024-01-15T10:30:00Z"
                      version:
                        type: string
                        example: "1.0.0"
                      postgres_enabled:
                        type: boolean
                        example: true
                        description: PostgreSQL database status
        '503':
          description: Service unavailable

  # Logging Operations
  /v1/logs/{provider}:
    get:
      summary: List payment logs with filtering
      description: |
        Retrieves payment logs for the authenticated tenant and specified provider with various filtering options.
        
        **Tenant Isolation:**
        - Each tenant can only access their own logs
        - Tenant information is automatically extracted from JWT token
        
        **Available Filters:**
        - Payment ID
        - Payment status
        - Errors only
        - Time range (hours)
        
        **Security:**
        - Sensitive data is automatically redacted in logs
        - JWT token authentication required
      tags: [Logs]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
        - name: paymentId
          in: query
          required: false
          schema:
            type: string
          description: Filter by specific payment ID
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, processing, successful, failed, cancelled, refunded]
          description: Filter by payment status
          example: successful
        - name: errorsOnly
          in: query
          required: false
          schema:
            type: boolean
          description: Show only error logs
          example: true
        - name: hours
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 168
            default: 24
          description: Time range in hours (max 7 days)
          example: 24
      responses:
        '200':
          description: Logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tenantId:
                            type: integer
                            example: 1
                          provider:
                            type: string
                            example: "iyzico"
                          filters:
                            type: object
                            properties:
                              hours:
                                type: integer
                                example: 24
                              paymentId:
                                type: string
                                example: "payment123"
                              status:
                                type: string
                                example: "successful"
                              errorsOnly:
                                type: boolean
                                example: false
                          count:
                            type: integer
                            example: 15
                          logs:
                            type: array
                            items:
                              $ref: '#/components/schemas/PaymentLog'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  /v1/logs/{provider}/payment/{paymentID}:
    get:
      summary: Get logs for specific payment
      description: |
        Retrieves all logs related to a specific payment ID for the authenticated tenant.
        Tenant information is automatically extracted from JWT token.
        
        **Use Cases:**
        - Debug payment issues
        - Track payment flow
        - Audit payment requests/responses
      tags: [Logs]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
        - name: paymentID
          in: path
          required: true
          schema:
            type: string
          description: Payment ID to get logs for
      responses:
        '200':
          description: Payment logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tenantId:
                            type: integer
                            example: 1
                          provider:
                            type: string
                            example: "iyzico"
                          paymentId:
                            type: string
                            example: "payment123"
                          count:
                            type: integer
                            example: 3
                          logs:
                            type: array
                            items:
                              $ref: '#/components/schemas/PaymentLog'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized - Invalid JWT token
        '404':
          description: Payment logs not found
        '500':
          description: Internal server error

  /v1/logs/{provider}/errors:
    get:
      summary: Get recent error logs
      description: |
        Retrieves recent error logs for the authenticated tenant and specified provider.
        Tenant information is automatically extracted from JWT token.
        
        **Error Types:**
        - Payment failures
        - API errors
        - Validation errors
        - Provider-specific errors
      tags: [Logs]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
        - name: hours
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 168
            default: 24
          description: Time range in hours (max 7 days)
          example: 24
      responses:
        '200':
          description: Error logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tenantId:
                            type: integer
                            example: 1
                          provider:
                            type: string
                            example: "iyzico"
                          hours:
                            type: integer
                            example: 24
                          count:
                            type: integer
                            example: 5
                          logs:
                            type: array
                            items:
                              $ref: '#/components/schemas/PaymentLog'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  /v1/logs/{provider}/stats:
    get:
      summary: Get logging statistics
      description: |
        Retrieves comprehensive logging statistics for the authenticated tenant and specified provider.
        Tenant information is automatically extracted from JWT token.
        
        **Statistics Include:**
        - Total request count
        - Success/error rates
        - Average processing time
        - Status code distribution
        - Error breakdown
      tags: [Logs]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: iyzico
        - name: hours
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 168
            default: 24
          description: Time range in hours (max 7 days)
          example: 24
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tenantId:
                            type: integer
                            example: 1
                          provider:
                            type: string
                            example: "iyzico"
                          hours:
                            type: integer
                            example: 24
                          stats:
                            $ref: '#/components/schemas/LoggingStats'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error

  # Authentication Operations
  /v1/auth/register:
    post:
      summary: Register new user (Admin only)
      description: |
        Registers a new user account with special rules:
        
        **Registration Rules:**
        - ✅ **First Registration**: If no users exist, registration creates the first admin user
        - ❌ **Subsequent Registrations**: Blocked - registration is closed, only admins can create new users via `/v1/auth/create-tenant`
        
        **First User Benefits:**
        - Automatically becomes admin
        - Gets full system access
        - Can create other users
        
        **Security:**
        - No authentication required for first user
        - Validates username uniqueness
        - Password must be at least 6 characters
        
        **Usage Scenarios:**
        1. **Fresh Installation**: First call creates admin user
        2. **Existing System**: Returns 403 Forbidden
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              first_admin:
                summary: First Admin Registration
                value:
                  username: "admin"
                  password: "securepassword123"
              blocked_registration:
                summary: Blocked Registration (after first user)
                value:
                  username: "user2"
                  password: "password123"
      responses:
        '201':
          description: Registration successful (first user only)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Successful Registration
                  value:
                    success: true
                    message: "Registration successful"
                    data:
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      expires_at: "2024-01-16T10:30:00Z"
                      username: "admin"
                      tenant_id: "1"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validation_error:
                  summary: Validation Error
                  value:
                    success: false
                    message: "Validation error"
                    error: "Username must be at least 3 characters"
        '403':
          description: Registration is closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                registration_closed:
                  summary: Registration Closed
                  value:
                    success: false
                    message: "registration is closed - only administrators can create new accounts"
        '500':
          description: Internal server error

  /v1/auth/login:
    post:
      summary: User login
      description: |
        Authenticates a user and returns a JWT token for API access.
        
        **Authentication Flow:**
        1. Validate username and password
        2. Generate JWT token (24 hour expiry)
        3. Update last login timestamp
        4. Return token and user info
        
        **Token Usage:**
        - Include in Authorization header: `Bearer <token>`
        - Required for all protected endpoints
        - Auto-expires after 24 hours
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              admin_login:
                summary: Admin Login
                value:
                  username: "admin"
                  password: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request format
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid Credentials
                  value:
                    success: false
                    message: "Invalid username or password"
        '500':
          description: Internal server error

  /v1/auth/logout:
    post:
      summary: User logout
      description: |
        Logs out the current user. Since JWT tokens are stateless, 
        this endpoint mainly provides a logout confirmation.
        
        **Note:** Clients should discard the JWT token after logout.
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Logged out successfully"
        '401':
          description: Unauthorized - Invalid or missing token

  /v1/auth/change-password:
    post:
      summary: Change user password
      description: |
        Changes password for authenticated user or other users (admin only).
        
        **For Regular Users:**
        - Must provide current password for verification
        - Can only change their own password
        
        **For Admin Users (tenant_id=1):**
        - Can change any user's password by providing target_tenant_id
        - No current password required when changing other users' passwords
        - Current password required when changing own password
        
        **Security Requirements:**
        - New password must be at least 6 characters
        - User must be authenticated with valid JWT token
      tags: [Authentication]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
            examples:
              own_password_change:
                summary: Change Own Password
                value:
                  current_password: "oldpassword123"
                  new_password: "newpassword123"
              admin_change_other:
                summary: Admin Change Other User's Password
                value:
                  target_tenant_id: 3
                  new_password: "newpassword123"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Password changed successfully"
                          target_tenant_id:
                            type: integer
                            example: 2
                            description: ID of the tenant whose password was changed
                          changed_by_admin:
                            type: boolean
                            example: false
                            description: Whether the password was changed by admin for another user
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_current_password:
                  summary: Missing Current Password
                  value:
                    success: false
                    message: "Current password is required when changing your own password"
        '401':
          description: Unauthorized or current password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                wrong_password:
                  summary: Wrong Current Password
                  value:
                    success: false
                    message: "Current password is incorrect"
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not_admin:
                  summary: Non-admin Trying to Change Other's Password
                  value:
                    success: false
                    message: "Only administrators can change other users' passwords"
        '404':
          description: Target tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tenant_not_found:
                  summary: Target Tenant Not Found
                  value:
                    success: false
                    message: "Target tenant not found"
        '500':
          description: Internal server error

  /v1/auth/create-tenant:
    post:
      summary: Create new tenant (Admin only)
      description: |
        Creates a new tenant account. Only available to authenticated admin users.
        
        **Admin Privileges:**
        - Only authenticated users can create new tenants
        - No limit on number of tenants
        - New tenant gets standard user privileges
        
        **Use Cases:**
        - Add new team members
        - Create service accounts
        - Manage multi-user access
      tags: [Authentication]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
            examples:
              new_tenant:
                summary: Create New Tenant
                value:
                  username: "newuser"
                  password: "password123"
      responses:
        '201':
          description: Tenant created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request data or validation error
        '401':
          description: Unauthorized - Admin access required
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                username_exists:
                  summary: Username Already Exists
                  value:
                    success: false
                    message: "Username already exists"
        '500':
          description: Internal server error

  /v1/auth/profile:
    get:
      summary: Get user profile
      description: |
        Retrieves the profile information for the authenticated user.
        
        **Returned Information:**
        - User ID and username
        - Account creation date
        - Last login timestamp
        - No sensitive data (passwords, tokens)
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized - Invalid or missing token
        '500':
          description: Internal server error

  /v1/auth/refresh:
    post:
      summary: Refresh JWT token
      description: |
        Refreshes an existing JWT token to extend its validity.
        
        **Token Refresh:**
        - Validates current token
        - Issues new token with extended expiry
        - Original token becomes invalid
      tags: [Authentication]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  description: Current JWT token to refresh
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid token format
        '401':
          description: Token expired or invalid
        '500':
          description: Internal server error

  /v1/auth/validate:
    get:
      summary: Validate JWT token
      description: |
        Validates a JWT token and returns user information if valid.
        
        **Use Cases:**
        - Check token validity before API calls
        - Verify user identity
        - Get user info from token
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          valid:
                            type: boolean
                            example: true
                          user:
                            $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid token format
        '401':
          description: Token expired or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          valid:
                            type: boolean
                            example: false
        '500':
          description: Internal server error

  /v1/payments/{provider}/commission:
    post:
      summary: Get commission with specific provider
      description: |
        Retrieves commission amount and rate for a given BIN, amount, currency, and installment count using a specific provider.
        Provider configuration is automatically loaded from JWT token context.

        **Available Providers:**
        - `iyzico` - İyzico (Turkey)
        - `ozanpay` - OzanPay (Turkey)
        - `stripe` - Stripe (Global)
        - `paycell` - Paycell (Turkey)
        - `papara` - Papara (Turkey)
        - `nkolay` - Nkolay (Turkey)
        - `paytr` - PayTR (Turkey)
        - `payu` - PayU (Global)

        **JWT Token Authentication:**
        - Bearer token automatically provides tenant context
        - Provider configuration is used automatically
      tags: [Payments]
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [iyzico, ozanpay, stripe, paycell, papara, nkolay, paytr, payu]
          description: Payment provider name
          example: paycell
        - name: environment
          in: query
          required: false
          schema:
            type: string
            enum: [sandbox, production]
            default: sandbox
          description: Payment environment (defaults to sandbox if not provided)
          example: sandbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommissionRequest'
      responses:
        '200':
          description: Commission info retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CommissionResponse'
        '400':
          description: Invalid request or provider not supported
        '401':
          description: Unauthorized - Invalid JWT token
        '500':
          description: Internal server error
